// Generated by CoffeeScript 2.5.1
var Reqs, Server, express, host, httpPort, ws;

express = require('express');

ws = require('nodejs-websocket');

Reqs = require('../../../dist/node/index.js');

httpPort = 3000;

host = 'localhost';

Server = class Server {
  constructor() {
    var srv;
    srv = this;
    this.api = new Reqs({
      events: {
        cbPing: function(time, cb) {
          var now;
          now = Date.now();
          // throw new Error 'cbPing example error'
          return cb(now - time, now);
        },
        syncPing: function(time) {
          var now;
          now = Date.now();
          // throw new Error 'syncPing example error'
          return this.methods.pong(now - time, now);
        },
        asyncPing: function(time) {
          var now;
          now = Date.now();
          // throw new Error 'asyncPing example error'
          return [now - time, now];
        }
      },
      methods: ['pong'],
      send: function(data) {
        return data;
      },
      error: function(message, code) {
        return this.sendError(message, code);
      },
      session: {
        arguments: 'res'
      },
      // coder:
      //     name: 'Coder'
      //     arguments: ['example key']
      key: 'example key',
      mode: 'sync' // By default all methods are sync
    });
    this.app = express();
    this.app.use(express.static('./examples/http/client/'));
    this.app.use('/dist/web/reqs.js', express.static('./dist/web/reqs.js'));
    this.app.post('/api', function(req, res) {
      var data;
      data = '';
      req.setEncoding('utf8');
      req.on('data', function(chunk) {
        return data += chunk;
      });
      return req.on('end', function() {
        var result, session;
        session = srv.api.new(res);
        console.log('<== Incoming request:', data);
        result = session.parse(data);
        if (!result) {
          result = '';
        }
        console.log('==> Sending response:', result);
        return res.end(result);
      });
    });
    srv.app.listen(httpPort, function() {
      return console.log(`Example Http server listening: http://localhost:${httpPort}`);
    });
  }

};

global.SRV = new Server();

//# sourceMappingURL=server.js.map
