// Generated by CoffeeScript 2.5.1
var Reqs, api, host, port, url, ws, wsc;

ws = require('nodejs-websocket');

Reqs = require('../../../dist/node/index.js');

port = 3001;

host = 'localhost';

url = `ws://${host}:${port}`;

api = new Reqs({
  events: {
    pong: function(t1, time) {
      var t2;
      t2 = Date.now() - time;
      return console.log(`Event: 'Pong'. Ping ${t1} + ${t2} = ${t1 + t2}`);
    },
    message: (channel, author, msg) => {
      // console.log "New message: <##{channel} [#{author}]: #{msg}>"
      return app.message(channel, author, msg);
    },
    channelCreated: function(channel, history) {
      return app.addChannel(channel, history);
    }
  },
  methods: [
    {
      cbPing: function() {
        return [
          Date.now(),
          function(t1,
          time) {
            var t2;
            t2 = Date.now() - time;
            return console.log(`Ping with callback result: ping ${t1} + ${t2} = ${t1 + t2}`);
          }
        ];
      },
      syncPing: {
        method: function() {
          return [Date.now()]; // Return array with arguments for method. Return result of 'send' function
        }
      },
      asyncPing: {
        mode: 'async',
        method: function() {
          return [Date.now()]; // Return array with arguments for method. Return promise.
        },
        // Optional function for promise.then() method
        then: function(result) {
          var t1,
    t2,
    time;
          t1 = result[0];
          time = result[1];
          t2 = Date.now() - time;
          return console.log(`asyncPing result: ${t1} + ${t2} = ${t1 + t2}`);
        },
        // Optional function for promise.catch() method
        catch: function(err) {
          return console.error('asyncPing error:',
    err);
        }
      },
      history: function() {
        return [
          function(channels) {
            return app.setHistory(channels);
          }
        ];
      }
    },
    'message',
    'createChannel'
  ],
  send: function(data) { // Function for sending data
    console.log('==> SEND:', data);
    if (this.conn && this.conn.readyState === 1) {
      this.conn.sendText(data);
    }
  },
  session: {
    arguments: 'conn'
  },
  // coder:
  //     name: 'Coder'
  //     arguments: ['example key']
  key: 'example key',
  mode: 'sync' // Methods call mode for all methods whithout async/sync flag
});

wsc = ws.connect(url, function() {
  var conn;
  console.log(`--- Connected to : ${url} ---`);
  conn = this;
  // Create new ReqsAPI session
  conn.session = api.new(conn);
  // Connection closing log
  conn.on('close', function(code, reason) {
    console.log('--- Connection closed', code, reason);
    delete conn.session;
  });
  // Conection errors handling (necessarily!)
  conn.on('error', function(err) {
    // This error happens when connections lost
    if (err.code === 'ECONNRESET') {

    } else {
      // console.error('--- Connection close error ECONNRESET');
      console.error('--- Connection error: ', err);
    }
  });
  // WS messages processing
  conn.on('text', function(text) {
    console.log('<== Incoming request:', text);
    return this.session.parse(text);
  });
  conn.session.methods.cbPing();
  conn.session.methods.syncPing();
  return conn.session.methods.asyncPing();
});

//# sourceMappingURL=client.js.map
