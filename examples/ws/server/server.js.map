{
  "version": 3,
  "file": "server.js",
  "sourceRoot": "../../..",
  "sources": [
    "examples/ws/server/server.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "express = require 'express'\nws = require 'nodejs-websocket'\nReqs = require '../../../dist/node/index.js'\n\nhttpPort = 3000\nwsPort = 3001\nhost = 'localhost'\n\nclass Server\n    constructor: (send) ->\n        srv = @\n\n        @channels = channels =\n            general:\n                history: [\n                    author: 'Welcome'\n                    message: 'Welcome to #general channel'\n                ]\n\n        @api = new Reqs(\n            events:\n                cbPing: (time, cb) ->\n                    now = Date.now()\n                    # throw new Error 'cbPing example error'\n                    cb now-time, now\n                syncPing: (time) ->\n                    now = Date.now()\n                    # throw new Error 'syncPing example error'\n                    @methods.pong now-time, now\n                asyncPing: (time) ->\n                    now = Date.now()\n                    # throw new Error 'asyncPing example error'\n                    return [now-time, now]\n                longMethodA: ->\n                    p = new Promise( (resolve, reject) ->\n                        setTimeout(\n                            ->\n                                resolve 'Resolved A'\n                            5000\n                        )\n                    )\n                    return p\n                longMethodB: (cb) ->\n                    setTimeout(\n                        ->\n                            cb 'Resolved B'\n                        5000\n                    )\n\n                message: (channel, author, message) ->\n                    c = channels[channel]\n                    if c\n                        c.history.push(\n                            author: author\n                            message: message\n                        )\n                        # Broadcast message\n                        for conn in srv.wss.connections\n                            if conn.session\n                                conn.session.methods.message channel, author, message\n                createChannel: (channel) ->\n                    c = channels[channel]\n                    if c\n                        @sendError 'Channel already exists', 422\n                    else\n                        history = [\n                            author: 'Welcome'\n                            message: \"Welcome to ##{channel} channel\"\n                        ]\n                        channels[channel] = { history }\n                        # Broadcast message\n                        for conn in srv.wss.connections\n                            if conn.session\n                                conn.session.methods.channelCreated channel, history\n                history: (cb) ->\n                    if cb\n                        cb channels\n                channelHistory: (channel, cb) ->\n                    c = channels[channel]\n                    if c and cb\n                        cb c.history\n\n            methods: ['pong', 'message', 'channelCreated']\n\n            send: (data) ->\n                conn = @conn\n                if conn.readyState is conn.OPEN # Check connection state\n                    console.log '==> Sending response:', data\n                    conn.sendText data\n\n            session:\n                arguments: 'conn' # Or ['a', 'b', 'c']\n            # coder:\n            #     name: 'Coder'\n            #     arguments: ['example key']\n            key: 'example key'\n            mode: 'sync' # By default all methods are sync\n        )\n\n        @wss = ws.createServer( (conn) ->\n            console.log '--- New connection! conn.path: ' + conn.path\n\n            # Create new ReqsAPI session\n            conn.session = srv.api.new conn\n\n            # Connection closing log\n            conn.on 'close', (code, reason) ->\n                console.log '--- Connection closed', code, reason\n                delete conn.session\n                return\n\n            # Conection errors handling (necessarily!)\n            conn.on 'error', (err) ->\n                # This error happens when connections lost\n                if err.code is 'ECONNRESET'\n                    # console.error('--- Connection close error ECONNRESET');\n                else\n                    console.error '--- Connection error: ', err\n                return\n\n            # WS messages processing\n            conn.on 'text', (text) ->\n                console.log '<== Incoming request:', text\n                @session.parse text\n\n            return\n        )\n\n        @app = express()\n        @app.use express.static './examples/ws/client/'\n        @app.use '/dist/web/reqs.js', express.static './dist/web/reqs.js'\n        @app.listen( httpPort, ->\n            console.log \"Example Http server listening: http://localhost:#{httpPort}\"\n        )\n\n        @wss.listen wsPort, host\n        console.log \"Example WS Server listening: ws://localhost:#{wsPort}\"\n\nglobal.SRV = new Server\n"
  ]
}