// Generated by CoffeeScript 2.5.1
var babel, babelES5, babelES5Minifi, babelMinifi, babelSaveTo, build, distMapPath1, distMapPath2, distMinPath1, distMinPath2, distNodeMainPath, distNodePath, distPath, distSrcPath2, distWebMainPath, distWebPath, fileWriteCb, fs, getIncudes, libDir, loadDir, moduleWrap, path, saveLibsForNode, saveModulesForNode, sourcesPath, srcMainFile, srcMainPath;

fs = require('fs');

path = require('path');

babel = require('@babel/core');

srcMainFile = 'reqs.js';

sourcesPath = './src/';

distPath = './dist/';

distWebPath = `${distPath}web/`;

distNodePath = `${distPath}node/`;

srcMainPath = `${sourcesPath}${srcMainFile}`;

distNodeMainPath = `${distNodePath}reqs.js`;

distWebMainPath = `${distWebPath}reqs.js`;

distMinPath1 = `${distWebPath}reqs.min.js`;

distMapPath1 = `${distWebPath}reqs.min.map`;

distSrcPath2 = `${distWebPath}reqs.es5.js`;

distMinPath2 = `${distWebPath}reqs.es5.min.js`;

distMapPath2 = `${distWebPath}reqs.es5.min.map`;

libDir = 'lib';

babelMinifi = {
  presets: ['minify'],
  comments: false,
  sourceMaps: true,
  sourceType: 'script'
};

babelES5 = {
  presets: [
    [
      '@babel/preset-env',
      {
        useBuiltIns: 'entry',
        targets: '> 0.25%, not dead',
        corejs: {
          version: 3
        }
      }
    ]
  ],
  comments: true,
  sourceMaps: true,
  sourceType: 'script'
};

babelES5Minifi = {
  presets: [
    [
      '@babel/preset-env',
      {
        useBuiltIns: 'entry',
        targets: '> 0.25%, not dead',
        corejs: {
          version: 3
        }
      }
    ],
    [
      'minify',
      {
        builtIns: false
      }
    ]
  ],
  comments: false,
  sourceMaps: true,
  sourceType: 'script'
};

build = function() {
  var codersSources, distSrcNode, distSrcWeb, includesL0, includesL1, libsSources, protocolsSources, reqsSources, webSourcesArr;
  reqsSources = fs.readFileSync(srcMainPath).toString();
  libsSources = loadDir(sourcesPath, libDir, false);
  protocolsSources = loadDir(sourcesPath, 'protocols');
  codersSources = loadDir(sourcesPath, 'coders');
  includesL0 = getIncudes(libsSources, '.');
  includesL1 = getIncudes(libsSources, '..');
  distSrcNode = `${includesL0}\n\n${reqsSources}`;
  webSourcesArr = [libsSources.join('\n'), reqsSources];
  // protocolsSources.join '\n'
  // codersSources.join '\n'
  distSrcWeb = moduleWrap('Reqs', webSourcesArr.join('\n\n'));
  // distSrcWeb = moduleWrap 'Reqs', "#{libsSources.join('\n')}\n\n#{reqsSources}\n\n#{protocolsSources.join('\n')}\n\n#{codersSources.join('\n')}"
  fs.writeFileSync(distNodeMainPath, distSrcNode);
  fs.writeFileSync(distWebMainPath, distSrcWeb);
  babelSaveTo(distSrcWeb, distMinPath1, distMapPath1, babelMinifi); // Default code minification
  babelSaveTo(distSrcWeb, distSrcPath2, null, babelES5); // ES5 code confertation
  babelSaveTo(distSrcWeb, distMinPath2, distMapPath2, babelES5Minifi); // ES5 code minification
  saveModulesForNode(sourcesPath, includesL1, 'protocols', 'Protocol');
  saveModulesForNode(sourcesPath, includesL1, 'coders', 'Coder');
  return saveLibsForNode(sourcesPath, libDir);
};

fileWriteCb = function(fileName) {
  return function(err) {
    if (err) {
      console.error('Error while saving file: ', fileName);
      return console.error(err);
    } else {
      return console.info('File saved:', fileName);
    }
  };
};

babelSaveTo = function(source, jsFile, mapFile, options) {
  return babel.transform(source, options, function(err, result) {
    if (err) {
      return console.error(err);
    }
    fs.writeFile(jsFile, result.code, fileWriteCb(jsFile));
    if (mapFile != null) {
      delete result.map.sourcesContent;
      result.map.sources = [path.basename(jsFile)];
      fs.writeFile(mapFile, JSON.stringify(result.map), fileWriteCb(mapFile));
    }
    return result;
  });
};

loadDir = function(modulePath, moduleName, isWrap = true) {
  var dirPath, file, files, i, len, moduleSrc, sources, str;
  dirPath = path.join(modulePath, moduleName);
  files = fs.readdirSync(dirPath, {
    withFileTypes: true
  });
  sources = [];
  for (i = 0, len = files.length; i < len; i++) {
    file = files[i];
    if (file.isFile() && file.name.endsWith('.js')) {
      moduleSrc = fs.readFileSync(`${dirPath}/${file.name}`).toString();
      if (isWrap) {
        sources.push(`Reqs.addModule((function(module){${moduleSrc};return module.exports})({}))`);
      } else {
        str = new String(moduleSrc);
        str.fileName = file.name;
        str.name = path.parse(file.name).name;
        // str.name = file.name.split('.')[0]
        sources.push(str);
      }
    }
  }
  return sources;
};

getIncudes = function(libs, level) {
  var i, includes, len, lib;
  includes = '';
  for (i = 0, len = libs.length; i < len; i++) {
    lib = libs[i];
    includes += `var ${lib.name} = require('${level}/${libDir}/${lib.name}')\n`;
  }
  return includes;
};

saveModulesForNode = function(modulePath, includes, moduleName, constructorName) {
  var filePath, fileSources, i, len, sources, src;
  sources = loadDir(modulePath, moduleName, false);
// constructorPath = "../#{libDir}/#{constructorName}"
  for (i = 0, len = sources.length; i < len; i++) {
    src = sources[i];
    filePath = `${distNodePath}${moduleName}/${src.fileName}`;
    // fileSources = "var #{constructorName} = require('#{constructorPath}')\n\n#{src}"
    fileSources = `${includes}\n\n${src}`;
    fs.writeFile(filePath, fileSources, fileWriteCb(filePath));
  }
};

saveLibsForNode = function(modulePath, moduleName) {
  var filePath, fileSources, i, inc, len, sources, src;
  sources = loadDir(modulePath, moduleName, false);
  for (i = 0, len = sources.length; i < len; i++) {
    src = sources[i];
    filePath = `${distNodePath}${libDir}/${src.fileName}`;
    // filePath = "#{distNodePath}#{libDir}/#{src.fileName}"
    inc = '';
    if (src.name !== 'Tools') {
      inc = "Tools = require('./Tools')\n\n";
    }
    fileSources = `${inc}${src}\n\nmodule.exports = ${src.name}\n`;
    fs.writeFile(filePath, fileSources, fileWriteCb(filePath));
  }
};

moduleWrap = function(moduleName, data) {
  return `this.${moduleName}=(function(module){${data};return module.exports})(this.module||{})`;
};

build();

//# sourceMappingURL=build.js.map
