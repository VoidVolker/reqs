{
  "version": 3,
  "file": "Protocol.js",
  "sourceRoot": "../..",
  "sources": [
    "src/lib/Protocol.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# Base classes for all requests types.\n# 1. For requests creation from incoming data\n# 2. Default data type for sending\n\n# Requests types\ntypes =\n    none: 0\n    method: 1\n    callback: 2\n    resolve: 3\n    reject: 4\n    error: 5\n    info: 6\n    0: 'none'\n    1: 'method'\n    2: 'callback'\n    3: 'resolve'\n    4: 'reject'\n    5: 'error'\n    6: 'info'\n\nclass Model\n    class Property\n        ###\n        @class\n        @param {string} name — property name\n        @param {string} optionsOrType — property type\n        @param {object} optionsOrType — property options:\n            {array} types — list of allowed property types\n            {boolean} [required] — is property required in object or not\n            {object} [value] — value property for Array type value\n            {object} [props] — properties for object type\n        ###\n        constructor: (@name, optionsOrType) ->\n            if Tools.isString optionsOrType\n                options = type: [optionsOrType]\n            else\n                options = optionsOrType\n                if Tools.isString options.type\n                    options.type = [options.type]\n\n            @type = Tools.null()\n            for t in options.type\n                @type[t] = true\n\n            @required = if options.required isnt undefined then options.required else false\n\n            # for array type\n            if options.value\n               @value = new Property null, options.value\n\n            # for object type\n            if options.props\n                @props = []\n                for own name, prop of options.props\n                    @props.push new Property name, prop\n\n        validate: (protocol, object, name, propPath) ->\n            name = @name or name\n            if @required or Object.hasOwnProperty.call object, name\n                value = object[name]\n                type = Tools.typeOf value\n\n                if propPath\n                    if Tools.isNumber name\n                        propPath += \"[#{name}]\"\n                    else\n                        propPath += \".#{name}\"\n                else\n                    propPath = name\n\n                # if @type.Key\n                #     if type isnt 'String'\n                #         protocol.throw \"Key property type validation fail. Property: '#{propPath}'. Expected type: 'String'. Got type: '#{type}'.\"\n                #     console.log 'Key:', value, propPath\n\n                if @type[type] isnt true\n                    types = Object.keys( @type ).join ', '\n                    protocol.throw \"Request property type validation fail. Property: '#{propPath}'. Expected types: '#{types}'. Got type: '#{type}'.\"\n\n                if @value and type is 'Array'\n                    for item, i in value\n                        @value.validate protocol, value, i, propPath\n\n                if @props and type is 'Object'\n                    for prop in @props\n                        prop.validate protocol, value, null, propPath\n            return @\n\n    @Property: Property\n\n    constructor: (props) ->\n        @props = []\n        for own name, prop of props\n            @props.push new Property name, prop\n\n    validate: (protocol, object) ->\n        for prop in @props\n            prop.validate protocol, object\n        return @\n\n    @required: (type, props = {}) ->\n        Object.assign props,\n            type: type\n            required: true\n\n\nclass ReqsRequest\n    constructor: (@type) ->\n\n# args = [ a...n ] - method argument list,\n# each argument can be callback function presented as string 'callback ID'\n# cbs = 'callbacks list' [ num_0...num_n ], callbacks postions in arguments list\n# OR\n# id = callback ID\nclass ReqsMethod extends ReqsRequest\n    ###\n    @class\n    @param {string} method — method name\n    @param {array} [args] — arguments list\n    @param {array} [cbs] — list of callbacks positions in arguments list (argument - callback ID).\n    @param {string} [id] — callback ID, if id is ommited - response is ommited too.\n    'Id' is used when sender want to get returned value of calling method.\n    'cbs' is used when sender client function was called with callbacks in arguments.\n    This logic allow to have several responses to one call - as callback and as returned value.\n    ###\n    constructor: (@method, id, args, cbs) ->\n        super types.method\n        if id then @id = id\n        if args then @args = args\n        if cbs then @cbs = cbs\n\nclass ReqsCallback extends ReqsRequest\n    ###\n    @class\n    @param {string} id — callback's ID: this is result of method or callback executing\n    @param {array} [args] — arguments list\n    @param {array} [cbs] — callbacks positions in arguments (value - callback ID)\n    ###\n    constructor: (@id, args, cbs) ->\n        super types.callback\n        if args then @args = args\n        if cbs then @cbs = cbs\n\nclass ReqsResolve extends ReqsRequest\n    ###\n    @class\n    @param {string} id — callback's ID: this is result of method or callback executing\n    @param {object} resolve — result\n    ###\n    constructor: (@id, @resolve) ->\n        super types.resolve\n\nclass ReqsReject extends ReqsRequest\n    ###\n    @class\n    @param {string} id — callback's ID: this is result of method or callback executing\n    @param {object} reject — result\n    ###\n    constructor: (@id, @reject) ->\n        super types.reject\n\nclass ReqsError extends ReqsRequest\n    constructor: (@message = '', @code = null, id) ->\n        super types.error\n        if id then @id = id\n\nclass ReqsInfo extends ReqsRequest\n    ###\n    @class\n    @param {string} id — callback's ID: this is result of method or callback executing\n    @param {string[]} [events] — list of events (for client's api)\n    @param {string[]} [methods] — list of methods (for client's api)\n    ###\n    constructor: (@id, events, methods) ->\n        super types.info\n        if events then @events = events\n        if methods then @methods = methods\n\nclass Protocol\n    @category: 'protocols'\n    @option = 'coder'\n\n    @types: types\n    types: types\n\n    constructor: (@options = {}) ->\n        @model =\n            request: new Model\n                type: Model.required 'Number'\n            method: new Model\n                method: Model.required 'String'\n                id: 'String'\n                args: 'Array'\n                cbs: 'Array'\n            callback: new Model\n                id: Model.required 'String'\n                args: 'Array'\n                cbs: 'Array'\n            promise: new Model\n                id: Model.required 'String'\n            error: new Model\n                message: Model.required 'String'\n                code: 'Number'\n                id: 'String'\n            info: new Model\n                id: Model.required 'String'\n                events: 'Array'\n                methods: 'Array'\n\n    throw: (msg) -> throw new Error \"Protocol processing error: #{msg}\"\n\n    # Request parsing and validation\n    parse: (request) ->\n        @model.request.validate @, request\n        switch request.type\n            when types.method\n                @model.method.validate @, request\n                r = new ReqsMethod request.method, request.id, request.args, request.cbs\n\n            when types.callback\n                @model.callback.validate @, request\n                r = new ReqsCallback request.id, request.args, request.cbs\n\n            when types.resolve\n                @model.promise.validate @, request\n                r = new ReqsResolve request.id, request.resolve\n\n            when types.reject\n                @model.promise.validate @, request\n                r = new ReqsReject request.id, request.reject\n\n            when types.error\n                @model.error.validate @, request\n                r = new ReqsError request.message, request.code, request.id\n\n            when types.info\n                @model.info.validate @, request\n                r = new ReqsInfo request.id, request.events, request.methods\n\n            else\n                r = @throw \"Unknown request type: #{request.type}\"\n        r\n\n    @Model: Model\n\n    # Request creation constructors (executes in Protocol's context)\n\n    ###\n    Create method request, constructor\n    @class\n    @param {string} methodName — method name\n    @param {string} id — id of the request\n    @param {array} arguments — method arguments\n    @param {array} cbs — callbacks ID positions in arguments\n    @return {object} request — builded request\n    ###\n    Method: ReqsMethod\n    @Method: ReqsMethod\n\n    ###\n    Create callback request, constructor\n    @class\n    @param {string} id — id of the request\n    @param {array} arguments — callback arguments\n    @param {array} cbs — callbacks ID positions in arguments\n    @return {object} request — builded request\n    ###\n    Callback: ReqsCallback\n    @Callback: ReqsCallback\n\n    ###\n    Create promise resolve request, constructor\n    @class\n    @param {string} id — id of the request\n    @param {object} result — result object\n    @return {object} request — builded request\n    ###\n    Resolve: ReqsResolve\n    @Resolve: ReqsResolve\n\n    ###\n    Create promise reject request, constructor\n    @class\n    @param {string} id — id of the request\n    @param {object} reject — reject object\n    @return {object} request — builded request\n    ###\n    Reject: ReqsReject\n    @Reject: ReqsReject\n\n    ###\n    Create error request, constructor\n    @class\n    @param {string} message — error message\n    @param {number} code — error code\n    @param {string} id — id of the request\n    @return {object} request — builded request\n    ###\n    Error: ReqsError\n    @Error: ReqsError\n\n    ###\n    Create info request, constructor\n    @class\n    @param {string} id — id of the request\n    @param {array} events — server's events list (methods at client side)\n    @param {array} methods — server's methods list (events at client side)\n    @return {object} request — builded request\n    ###\n    Info: ReqsInfo\n    @Info: ReqsInfo\n"
  ]
}