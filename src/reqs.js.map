{
  "version": 3,
  "file": "reqs.js",
  "sourceRoot": "..",
  "sources": [
    "src/reqs.coffee"
  ],
  "names": [],
  "mappings": ";AAGG;;;;AAAA,IAAA,IAAA;EAAA;;AACG;;;EAAN,MAAA,KAAA,CAAA;;;;;;;;;IAiCI,WAAa,CAAC,UAAU,CAAA,CAAX,CAAA;AACjB,UAAA,KAAA,EAAA,SAAA,EAAA,CAAA,EAAA,IAAA,EAAA,QAAA,EAAA,YAAA,EAAA,GAAA,EAAA;MAAQ,IAAC,CAAA,MAAD,GAAU,KAAK,CAAC,IAAN,CAAA;MACV,IAAC,CAAA,OAAD,GAAW,KAAK,CAAC,IAAN,CAAA;MACX,IAAC,CAAA,SAAD,GAAa;MACb,IAAC,CAAA,UAAD,GAAc,KAAK,CAAC,IAAN,CAAA,EAHtB;MAIQ,IAAC,CAAA,GAAD,GAAO,EAJf;MAKQ,IAAC,CAAA,SAAD,GAAa,KAAK,CAAC,IAAN,CAAA,EALrB;MAMQ,IAAC,CAAA,IAAD,GAAQ,EANhB;;;MASQ,IAAG,OAAO,CAAC,MAAX;AAGI;QAAA,KAAA,WAAA;;;UACI,IAAC,CAAA,MAAM,CAAC,IAAD,CAAP,GAAgB;QADpB,CAHJ;OATR;;MAgBQ,IAAG,OAAO,CAAC,OAAX;QACI,IAAC,CAAA,UAAD,CAAY,OAAO,CAAC,OAApB,EADJ;OAhBR;;;MAqBQ,IAAC,CAAA,OAAD,GACI;QAAA,OAAA,EAAS,OAAO,CAAC,OAAR,IAAmB,CAAA,CAA5B;QACA,OAAA,EAAS,OAAO,CAAC;MADjB,EAtBZ;;MA0BQ,IAAG,OAAO,CAAC,IAAX;QACI,IAAC,CAAA,IAAD,GAAQ,OAAO,CAAC,KADpB;OA1BR;;MA8BQ,IAAG,OAAO,CAAC,KAAX;QACI,IAAC,CAAA,KAAD,GAAS,OAAO,CAAC,MADrB;OA9BR;;MAkCQ,IAAG,OAAO,CAAC,KAAX;QACI,IAAC,CAAA,KAAD,GAAS,OAAO,CAAC,MADrB;;MAEA,IAAG,OAAO,CAAC,MAAX;QACI,IAAC,CAAA,MAAD,GAAU,OAAO,CAAC,OADtB;OApCR;;MAwCQ,SAAA,GAAe,OAAO,CAAC,GAAX,GAAoB,CAAC,OAAO,CAAC,GAAT,CAApB,GAAuC;MACnD,IAAG,OAAO,CAAC,KAAX;QACI,IAAG,KAAK,CAAC,QAAN,CAAe,OAAO,CAAC,KAAvB,CAAH;UACI,KAAA,GAAQ,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,KAAT,EADvB;SAAA,MAAA;UAGI,KAAA,GAAQ,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,IAAd,IAAsB,IAAI,CAAC,OAAO,CAAC,KAApC;UACnB,IAAG,OAAO,CAAC,KAAK,CAAC,SAAjB;YACI,SAAA,GAAY,OAAO,CAAC,KAAK,CAAC,UAD9B;WAJJ;;QAMA,IAAG,CAAI,KAAP;UACI,MAAM,IAAI,KAAJ,CAAU,CAAA,gBAAA,CAAA,CAAmB,OAAO,CAAC,KAA3B,CAAA,CAAA,CAAV,EADV;SAPJ;OAAA,MAAA;QAUI,KAAA,GAAQ,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,KAAd,EAVvB;;MAWA,IAAC,CAAA,KAAD,GAAS,IAAI,KAAJ,CAAU,GAAG,SAAb,EApDjB;;MAuDQ,YAAA,GAAe;MACf,IAAG,OAAO,CAAC,QAAX;QACI,IAAG,KAAK,CAAC,QAAN,CAAe,OAAO,CAAC,QAAvB,CAAH;UACI,QAAA,GAAW,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,QAAT,EAD7B;SAAA,MAAA;UAGI,QAAA,GAAW,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAjB,IAAyB,IAAI,CAAC,OAAO,CAAC,QAAvC;UACzB,IAAG,OAAO,CAAC,QAAQ,CAAC,SAApB;YACI,YAAA,GAAe,OAAO,CAAC,QAAQ,CAAC,UADpC;WAJJ;;QAMA,IAAG,CAAI,QAAP;UACI,MAAM,IAAI,KAAJ,CAAU,CAAA,mBAAA,CAAA,CAAsB,OAAO,CAAC,QAA9B,CAAA,CAAA,CAAV,EADV;SAPJ;OAAA,MAAA;QAUI,QAAA,GAAW,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,QAAd,EAV7B;;MAWA,IAAC,CAAA,QAAD,GAAY,IAAI,QAAJ,CAAa,GAAG,YAAhB,EAnEpB;;MAsEQ,IAAG,OAAO,CAAC,OAAX;;QAEI,KAAA,GAAQ,OAAO,CAAC,OAAO,CAAC;QACxB,IAAG,KAAK,CAAC,QAAN,CAAe,KAAf,CAAH;UACI,IAAC,CAAA,OAAO,CAAC,OAAO,CAAC,SAAjB,GAA6B,CAAC,KAAD,EADjC;SAAA,MAEK,IAAG,KAAK,CAAC,OAAN,CAAc,KAAd,CAAH;UACD,IAAC,CAAA,OAAO,CAAC,OAAO,CAAC,SAAjB,GAA6B,MAD5B;SALT;OAAA,MAAA;QAQI,IAAC,CAAA,OAAO,CAAC,OAAT,GACI;UAAA,SAAA,EAAW;QAAX,EATR;;MAWA,MAAM,CAAC,cAAP,CAAsB,IAAtB,EAAyB,OAAzB,EAAkC;QAC9B,GAAA,EAAK,CAAA,CAAA,GAAA;iBAAG,IAAC,CAAA;QAAJ,CADyB;QAE9B,GAAA,EAAK,CAAC,KAAD,CAAA,GAAA;iBAAW,IAAC,CAAA,QAAD,CAAU,KAAV;QAAX;MAFyB,CAAlC;MAKA,IAAC,CAAA,KAAD,GACO,KAAK,CAAC,SAAN,CAAgB,OAAO,CAAC,IAAxB,CAAH,GACK,OAAO,CAAC,IAAR,KAAgB,OADrB,GAEK,IAAI,CAAC,OAAO,CAAC,IAAb,KAAqB;IA1FrB,CAhCjB;;;;;;;;;;;IAuII,KAAO,CAAC,IAAD,CAAA;AACX,UAAA,WAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,OAAA,EAAA;AAAQ;QACI,WAAA,GAAc,IAAC,CAAA,KAAK,CAAC,MAAP,CAAc,IAAd,EADlB;OAEA,aAAA;QAAM;AACF,eAAO,IAAC,CAAA,MAAD,CAAQ,CAAA,uBAAA,CAAA,CAA0B,CAAC,CAAC,OAA5B,CAAA,EAAA,CAAA,CAAwC,CAAC,CAAC,KAA1C,CAAA,CAAR,EADX;;AAGA;QACI,IAAG,KAAK,CAAC,OAAN,CAAc,WAAd,CAAH;UACI,KAAA,6CAAA;;YAAA,MAAA,GAAS,IAAC,CAAA,cAAD,CAAgB,OAAhB;UAAT,CADJ;SAAA,MAAA;UAGI,MAAA,GAAS,IAAC,CAAA,cAAD,CAAgB,WAAhB,EAHb;SADJ;OAKA,aAAA;QAAM;AACF,eAAO,IAAC,CAAA,MAAD,CAAQ,CAAA,uBAAA,CAAA,CAA0B,CAAC,CAAC,OAA5B,CAAA,EAAA,CAAA,CAAwC,CAAC,CAAC,KAA1C,CAAA,CAAR,EADX;;aAEA;IAbG;;IAeP,cAAgB,CAAC,IAAD,CAAA;AACpB,UAAA,IAAA,EAAA,CAAA,EAAA,EAAA,EAAA,MAAA,EAAA,SAAA,EAAA,QAAA,EAAA,OAAA,EAAA,QAAA,EAAA,MAAA,EAAA,KAAA,EAAA;MAAQ,OAAA,GAAU,IAAC,CAAA,QAAQ,CAAC,KAAV,CAAgB,IAAhB;MACV,QAAA,GAAW,IAAC,CAAA;MACZ,KAAA,GAAQ,QAAQ,CAAC;MACjB,EAAA,GAAK,OAAO,CAAC;AACb,cAAO,OAAO,CAAC,IAAf;;;AAAA,aAIS,KAAK,CAAC,MAJf;UAKQ,MAAA,GAAS,OAAO,CAAC;UACjB,EAAA,GAAK,IAAC,CAAA,MAAM,CAAC,MAAD;UACZ,IAAG,EAAH;YACI,IAAA,GAAO,gBAAA,CAAiB,IAAjB,EAAoB,OAAO,CAAC,IAA5B,EAAkC,OAAO,CAAC,GAA1C;YACP,IAAG,EAAH;;AACI;gBACI,MAAA,GAAS,EAAE,CAAC,KAAH,CAAS,IAAT,EAAY,IAAZ;gBAET,IAAG,MAAA,YAAkB,OAArB;kBACI,MAAM,CAAC,IAAP,CAAa,CAAC,aAAD,CAAA,GAAA;2BACT,IAAC,CAAA,OAAD,CAAS,IAAI,QAAQ,CAAC,OAAb,CAAqB,EAArB,EAAyB,aAAzB,CAAT;kBADS,CAAb,CAEC,CAAC,KAFF,CAES,CAAC,UAAD,CAAA,GAAA;2BACL,IAAC,CAAA,OAAD,CAAS,IAAI,QAAQ,CAAC,MAAb,CAAoB,EAApB,EAAwB,UAAU,CAAC,QAAX,CAAA,CAAxB,CAAT;kBADK,CAFT;AAKA,yBAAO,OANX;iBAAA,MAAA;kBAQI,QAAA,GAAW,IAAI,QAAQ,CAAC,OAAb,CAAqB,EAArB,EAAyB,MAAzB,EARf;iBAHJ;eAaA,aAAA;gBAAM,UAC9B;gBAA4B,QAAA,GAAW,IAAI,QAAQ,CAAC,MAAb,CAAoB,EAApB,EAAwB,CAAC,CAAC,QAAF,CAAA,CAAxB,EADf;;AAEA,qBAAO,IAAC,CAAA,OAAD,CAAS,QAAT,EAhBX;aAAA,MAAA;AAkBI,qBAAO,EAAE,CAAC,KAAH,CAAS,IAAT,EAAY,IAAZ,EAlBX;aAFJ;WAAA,MAAA;AAsBI,mBAAO,IAAC,CAAA,MAAD,CAAQ,CAAA,mBAAA,CAAA,CAAsB,MAAtB,CAAA,EAAA,CAAR,EAtBX;;AAHC;;;AAJT,aAiCS,KAAK,CAAC,QAjCf;UAkCQ,EAAA,GAAK,IAAC,CAAA,UAAU,CAAC,EAAD;UAChB,IAAG,EAAA,KAAM,MAAT;AACI,mBAAO,IAAC,CAAA,MAAD,CAAQ,CAAA,oBAAA,CAAA,CAAuB,EAAvB,CAAA,EAAA,CAAR,EADX;;UAEA,OAAO,IAAC,CAAA,UAAU,CAAC,EAAD;UAClB,IAAA,GAAO,gBAAA,CAAiB,IAAjB,EAAoB,OAAO,CAAC,IAA5B,EAAkC,OAAO,CAAC,GAA1C;AACP,iBAAO,EAAE,CAAC,KAAH,CAAS,IAAT,EAAY,IAAA,IAAQ,EAApB;AAvCf,aAyCS,KAAK,CAAC,OAzCf;UA0CQ,SAAA,GAAY,IAAC,CAAA,SAAS,CAAC,EAAD;UACtB,OAAO,IAAC,CAAA,SAAS,CAAC,EAAD;UACjB,IAAG,SAAA,IAAc,SAAS,CAAC,OAA3B;AACI,mBAAO,SAAS,CAAC,OAAO,CAAC,IAAlB,CAAuB,IAAvB,EAA0B,OAAO,CAAC,OAAlC,EADX;WAAA,MAAA;AAGI,mBAAO,IAAC,CAAA,MAAD,CAAQ,CAAA,2BAAA,CAAA,CAA8B,EAA9B,CAAA,EAAA,CAAR,EAHX;;AAHC;AAzCT,aAiDS,KAAK,CAAC,MAjDf;UAkDQ,SAAA,GAAY,IAAC,CAAA,SAAS,CAAC,EAAD;UACtB,OAAO,IAAC,CAAA,SAAS,CAAC,EAAD;UACjB,IAAG,SAAA,IAAc,SAAS,CAAC,MAA3B;AACI,mBAAO,SAAS,CAAC,MAAM,CAAC,IAAjB,CAAsB,IAAtB,EAAyB,OAAO,CAAC,MAAjC,EADX;WAAA,MAAA;AAGI,mBAAO,IAAC,CAAA,MAAD,CAAQ,CAAA,0BAAA,CAAA,CAA6B,EAA7B,CAAA,EAAA,CAAR,EAHX;;AAHC;AAjDT,aAyDS,KAAK,CAAC,IAzDf;UA0DQ,IAAG,EAAH;;AAEI,mBAAO,IAAC,CAAA,OAAD,CAAS,IAAI,QAAQ,CAAC,QAAb,CAAsB,EAAtB,EAA0B;cACtC,MAAM,CAAC,IAAP,CAAY,IAAC,CAAA,OAAb,CADsC;cAEtC,MAAM,CAAC,IAAP,CAAY,IAAC,CAAA,MAAb,CAFsC;aAA1B,CAAT,EAFX;;AADC;AAzDT,aAiES,KAAK,CAAC,KAjEf;AAkEQ,iBAAO,IAAC,CAAA,MAAD,CAAQ,CAAA,sBAAA,CAAA,CAAyB,OAAO,CAAC,IAAjC,CAAA,GAAA,CAAA,CAA2C,OAAO,CAAC,OAAnD,CAAA,CAAR;AAlEf;AAqEQ,iBAAO,IAAC,CAAA,MAAD,CAAQ,CAAA,uBAAA,CAAA,CAA0B,OAAO,CAAC,IAAlC,CAAA,EAAA,CAAR;AArEf;AAuEA,aAAO;IA5EK,CAtJpB;;;;;;IAwOI,OAAS,CAAC,OAAD,CAAA;aACL,IAAC,CAAA,IAAD,CAAM,IAAC,CAAA,KAAK,CAAC,MAAP,CAAc,OAAd,CAAN;IADK,CAxOb;;;;;;;;;IA2PI,MAAQ,CAAC,OAAD,CAAA;aACJ,IAAC,CAAA,KAAD,CAAO,OAAP,EAAgB,GAAhB;IADI,CA3PZ;;;;;;IAmQI,MAAQ,CAAC,OAAD,CAAA;aACJ,IAAC,CAAA,KAAD,CAAO,OAAP,EAAgB,GAAhB;IADI,CAnQZ;;;;;;IA2QI,MAAQ,CAAC,OAAD,CAAA;aACJ,IAAC,CAAA,KAAD,CAAO,OAAP,EAAgB,GAAhB;IADI,CA3QZ;;;;;;;IAoRI,KAAO,CAAC,OAAD,EAAU,IAAV,CAAA;aACH,OAAO,CAAC,IAAR,CAAa,IAAb,EAAmB,OAAnB;IADG,CApRX;;;;;;;;IA6RI,SAAW,CAAC,OAAD,EAAU,IAAV,EAAgB,EAAhB,CAAA;aACP,IAAC,CAAA,OAAD,CAAS,IAAI,IAAC,CAAA,QAAQ,CAAC,KAAd,CAAoB,OAApB,EAA6B,IAA7B,EAAmC,EAAnC,CAAT;IADO,CA7Rf;;;;;;;;;IAwSI,QAAU,CAAC,KAAD,CAAA;MACN,IAAC,CAAA,MAAD,GAAU;MACV,IAAC,CAAA,WAAD,GAAkB,KAAH,GAAc,IAAC,CAAA,gBAAf,GAAqC,IAAC,CAAA;IAF/C,CAxSd;;;;;;IAgTI,QAAU,CAAC,KAAD,CAAA;aAAW,IAAC,CAAA,KAAD,GAAS,IAAI,CAAC,MAAM,CAAC,KAAD;IAA/B,CAhTd;;;;;;IAsTI,WAAa,CAAC,QAAD,CAAA;aAAc,IAAC,CAAA,QAAD,GAAY,IAAI,CAAC,SAAS,CAAC,QAAD;IAAxC,CAtTjB;;;;;;IA4TI,GAAK,CAAC,MAAD,EAAA,GAAY,IAAZ,CAAA;aAAqB,IAAC,CAAC,MAAM,CAAC,MAAR,CAAD,GAAmB,IAAI,MAAJ,CAAW,GAAG,IAAd;IAAxC,CA5TT;;;;;;;;;;IA8VI,cAAgB,CAAC,EAAD,CAAA;AACpB,UAAA,GAAA,EAAA;MAAQ,GAAA,GAAM;MACN,KAAA,GAAQ,QAAA,CAAA,CAAA;eACJ,eAAA,CAAgB,GAAhB,EAAqB,EAArB,EAAyB,SAAzB;MADI;MAER,KAAK,CAAC,OAAN,GAAgB,IAAI,CAAC,GAAL,CAAA,EAHxB;aAIQ;IALY,CA9VpB;;;;;;IA6WI,KAAO,CAAA,CAAA;MACH,IAAG,IAAC,CAAA,GAAD,KAAQ,MAAM,CAAC,gBAAlB;QACI,IAAC,CAAA,GAAD,GAAO,EADX;;aAEA,CAAC,EAAE,IAAC,CAAA,GAAJ,CAAQ,CAAC,QAAT,CAAA;IAHG,CA7WX;;;;;;IAsXI,MAAQ,CAAA,CAAA;MACJ,IAAG,IAAC,CAAA,IAAD,KAAS,MAAM,CAAC,gBAAnB;QACI,IAAC,CAAA,IAAD,GAAQ,EADZ;;aAEA,CAAC,EAAE,IAAC,CAAA,IAAJ,CAAS,CAAC,QAAV,CAAA;IAHI,CAtXZ;;;;;;;;;;IAmYI,WAAa,CAAC,EAAD,CAAA;AACjB,UAAA;MAAQ,EAAA,GAAK,IAAC,CAAA,KAAD,CAAA;MACL,IAAC,CAAA,UAAU,CAAC,EAAD,CAAX,GAAkB;aAClB;IAHS,CAnYjB;;;;;;;;IA8YI,MAAQ,CAAC,MAAD,EAAA,GAAY,IAAZ,CAAA;aAAqB,IAAC,CAAA,WAAD,CAAa,MAAb,EAAqB,IAArB;IAArB,CA9YZ;;;;;;;IAqZI,WAAa,CAAC,MAAD,EAAA,GAAY,IAAZ,CAAA;aAAqB,IAAC,CAAA,gBAAD,CAAkB,MAAlB,EAA0B,IAA1B;IAArB,CArZjB;;;;;;;IA4ZI,UAAY,CAAC,MAAD,EAAA,GAAY,IAAZ,CAAA;aAAqB,IAAC,CAAA,eAAD,CAAiB,MAAjB,EAAyB,IAAzB;IAArB,CA5ZhB;;;;;;;;IAoaI,gBAAkB,CAAC,MAAD,EAAS,IAAT,CAAA;AACtB,UAAA,GAAA,EAAA,aAAA,EAAA,GAAA,EAAA;MAAQ,CAAC,aAAD,EAAgB,GAAhB,CAAA,GAAuB,gBAAA,CAAiB,IAAjB,EAAoB,IAApB;MACvB,GAAA,GAAM,IAAC,CAAA,MAAD,CAAA;MACN,OAAA,GAAU,IAAI,OAAJ,CAAY,CAAC,OAAD,EAAU,MAAV,CAAA,GAAA;eAAqB,IAAC,CAAA,SAAS,CAAC,GAAD,CAAV,GAAkB,CAAE,OAAF,EAAW,MAAX;MAAvC,CAAZ;MACV,IAAC,CAAA,OAAD,CAAS,IAAI,IAAC,CAAA,QAAQ,CAAC,MAAd,CAAqB,MAArB,EAA6B,GAA7B,EAAkC,aAAlC,EAAiD,GAAjD,CAAT,EAHR;aAIQ;IALc,CApatB;;;;;;;;IAibI,eAAiB,CAAC,MAAD,EAAS,IAAT,CAAA;AACrB,UAAA,GAAA,EAAA;MAAQ,CAAC,aAAD,EAAgB,GAAhB,CAAA,GAAuB,gBAAA,CAAiB,IAAjB,EAAoB,IAApB;aACvB,IAAC,CAAA,OAAD,CAAS,IAAI,IAAC,CAAA,QAAQ,CAAC,MAAd,CAAqB,MAArB,EAA6B,IAA7B,EAAmC,aAAnC,EAAkD,GAAlD,CAAT,EAFa;IAAA,CAjbrB;;;;;;;;;;IA6bI,SAAW,CAAC,MAAD,CAAA;AACf,UAAA;MAAQ,GAAA,GAAM;MACN,IAAC,CAAA,OAAO,CAAC,MAAD,CAAR,GAAmB,QAAA,CAAA,CAAA;eAAG,GAAG,CAAC,WAAJ,CAAgB,MAAhB,EAAwB,SAAxB;MAAH;aACnB;IAHO,CA7bf;;;;;;;;;;;;IA4cI,YAAc,CAAC,MAAD,EAAS,EAAT,EAAa,IAAb,EAAmB,MAAnB,EAA2B,OAA3B,EAAoC,OAAO,IAA3C,CAAA;AAClB,UAAA,GAAA,EAAA,OAAA,EAAA;MAAQ,GAAA,GAAM;MACN,OAAA,GAAU,IAAC,CAAA;MACX,IAAG,IAAA,IAAS,OAAO,CAAC,MAAD,CAAnB;AAAiC,eAAjC;;MACA,IAAG,IAAA,KAAQ,MAAX;QACI,IAAG,EAAH;UACI,OAAO,CAAC,MAAD,CAAP,GAAkB,QAAA,CAAA,CAAA;mBAAG,GAAG,CAAC,WAAJ,CAAgB,MAAhB,EAAwB,EAAE,CAAC,KAAH,CAAS,GAAT,EAAc,SAAd,CAAxB;UAAH,EADtB;SAAA,MAAA;UAGI,OAAO,CAAC,MAAD,CAAP,GAAkB,QAAA,CAAA,CAAA;mBAAG,GAAG,CAAC,WAAJ,CAAgB,MAAhB,EAAwB,SAAxB;UAAH,EAHtB;SADJ;OAAA,MAKK,IAAG,IAAA,KAAQ,OAAX;QACD,IAAG,MAAA,IAAW,OAAd;UACI,GAAA,GACO,EAAH,GAAW,QAAA,CAAA,CAAA;mBACP,GAAG,CAAC,gBAAJ,CACI,MADJ,EACY,EAAE,CAAC,KAAH,CAAS,GAAT,EAAc,SAAd,CADZ,CAEC,CAAC,IAFF,CAEQ,MAFR,CAEgB,CAAC,KAFjB,CAEuB,OAFvB;UADO,CAAX,GAIK,QAAA,CAAA,CAAA;mBACD,GAAG,CAAC,gBAAJ,CACI,MADJ,EACY,SADZ,CAEC,CAAC,IAFF,CAEQ,MAFR,CAEgB,CAAC,KAFjB,CAEuB,OAFvB;UADC,EANb;SAAA,MAUK,IAAG,MAAH;UACD,GAAA,GACO,EAAH,GAAW,QAAA,CAAA,CAAA;mBACP,GAAG,CAAC,gBAAJ,CACI,MADJ,EACY,EAAE,CAAC,KAAH,CAAS,GAAT,EAAc,SAAd,CADZ,CAEC,CAAC,IAFF,CAEO,MAFP;UADO,CAAX,GAIK,QAAA,CAAA,CAAA;mBACD,GAAG,CAAC,gBAAJ,CACI,MADJ,EACY,SADZ,CAEC,CAAC,IAFF,CAEO,MAFP;UADC,EANR;SAAA,MAUA,IAAG,OAAH;UACD,GAAA,GACO,EAAH,GAAW,QAAA,CAAA,CAAA;mBACP,GAAG,CAAC,gBAAJ,CACI,MADJ,EACY,EAAE,CAAC,KAAH,CAAS,GAAT,EAAc,SAAd,CADZ,CAEC,CAAC,KAFF,CAEQ,OAFR;UADO,CAAX,GAIK,QAAA,CAAA,CAAA;mBACD,GAAG,CAAC,gBAAJ,CACI,MADJ,EACY,SADZ,CAEC,CAAC,KAFF,CAEQ,OAFR;UADC,EANR;SAAA,MAAA;UAWD,GAAA,GACO,EAAH,GAAW,QAAA,CAAA,CAAA;mBAAG,GAAG,CAAC,gBAAJ,CAAqB,MAArB,EAA6B,EAAE,CAAC,KAAH,CAAS,GAAT,EAAc,SAAd,CAA7B;UAAH,CAAX,GACK,QAAA,CAAA,CAAA;mBAAG,GAAG,CAAC,gBAAJ,CAAqB,MAArB,EAA6B,SAA7B;UAAH,EAbR;;QAcL,OAAO,CAAC,MAAD,CAAP,GAAkB,IAnCjB;OAAA,MAAA;QAqCD,OAAO,CAAC,MAAD,CAAP,GACO,EAAH,GAAW,QAAA,CAAA,CAAA;iBAAG,GAAG,CAAC,eAAJ,CAAoB,MAApB,EAA4B,EAAE,CAAC,KAAH,CAAS,GAAT,EAAc,SAAd,CAA5B;QAAH,CAAX,GACK,QAAA,CAAA,CAAA;iBAAG,GAAG,CAAC,eAAJ,CAAoB,MAApB,EAA4B,SAA5B;QAAH,EAvCR;;aAwCL;IAjDU,CA5clB;;;;;;;;;;IAugBI,UAAY,CAAC,WAAD,EAAc,IAAd,CAAA;AAChB,UAAA,CAAA,EAAA,GAAA,EAAA,CAAA,EAAA,MAAA,EAAA,OAAA,EAAA;MAAQ,OAAA,GAAU,IAAC,CAAA;MACX,IAAG,KAAK,CAAC,OAAN,CAAc,WAAd,CAAH;QAEI,KAAA,6CAAA;;UACI,IAAG,KAAK,CAAC,QAAN,CAAe,MAAf,CAAH;YACI,IAAG,OAAO,CAAC,MAAD,CAAV;AACI,uBADJ;;YAEA,IAAC,CAAA,SAAD,CAAW,MAAX,EAHJ;WAAA,MAIK,IAAG,KAAK,CAAC,QAAN,CAAe,MAAf,CAAH;YACD,KAAA,cAAA;;;cACI,IAAG,OAAO,CAAC,IAAD,CAAV;AAAsB,yBAAtB;;cACA,IAAG,KAAK,CAAC,UAAN,CAAiB,CAAjB,CAAH;gBACI,IAAC,CAAA,YAAD,CAAc,IAAd,EAAoB,CAApB,EAAuB,IAAvB,EAA6B,IAA7B,EAAmC,IAAnC,EAAyC,IAAzC,EADJ;eAAA,MAAA;gBAGI,IAAC,CAAA,YAAD,CAAc,IAAd,EAAoB,CAAC,CAAC,MAAtB,EAA8B,CAAC,CAAC,IAAhC,EAAsC,CAAC,CAAC,IAAxC,EAA8C,CAAC,CAAC,KAAhD,EAAuD,IAAvD,EAHJ;;YAFJ,CADC;;QALT,CAFJ;OAAA,MAeK,IAAG,KAAK,CAAC,QAAN,CAAe,WAAf,CAAH;QACD,KAAA,mBAAA;;;UACI,IAAG,OAAO,CAAC,IAAD,CAAV;AAAsB,qBAAtB;;UACA,IAAG,KAAK,CAAC,UAAN,CAAiB,CAAjB,CAAH;YACI,IAAC,CAAA,YAAD,CAAc,IAAd,EAAoB,CAApB,EAAuB,IAAvB,EAA6B,IAA7B,EAAmC,IAAnC,EAAyC,IAAzC,EADJ;WAAA,MAAA;YAGI,IAAC,CAAA,YAAD,CAAc,IAAd,EAAoB,CAAC,CAAC,MAAtB,EAA8B,CAAC,CAAC,IAAhC,EAAsC,CAAC,CAAC,IAAxC,EAA8C,CAAC,CAAC,KAAhD,EAAuD,IAAvD,EAHJ;;QAFJ,CADC;;aAOL;IAxBQ,CAvgBhB;;;;;;;;IAwiBI,IAAM,CAAC,EAAD,EAAK,UAAU,CAAA,CAAf,CAAA;AACV,UAAA;MAAQ,IAAG,CAAI,KAAK,CAAC,UAAN,CAAiB,EAAjB,CAAP;QACI,MAAM,IAAI,KAAJ,CAAU,6CAAV,EADV;OAAR;;MAGQ,EAAA,GAAK,IAAC,CAAA,WAAD,CAAa,EAAb;aACL,IAAC,CAAA,OAAD,CAAS,IAAI,IAAC,CAAA,QAAQ,CAAC,IAAd,CAAmB,EAAnB,EAAuB,OAAO,CAAC,MAA/B,EAAuC,OAAO,CAAC,OAA/C,CAAT;IALE,CAxiBV;;;;;;;IAqjBI,KAAO,CAAC,EAAD,CAAA;MACH,IAAC,CAAA,IAAD,CAAM,CAAC,MAAD,EAAS,OAAT,CAAA,GAAA;QACF,IAAC,CAAA,UAAD,CAAY,OAAZ;QACA,IAAG,KAAK,CAAC,UAAN,CAAiB,EAAjB,CAAH;iBACI,EAAA,CAAG,MAAH,EAAW,OAAX,EADJ;;MAFE,CAAN;aAIA;IALG,CArjBX;;;;;IAgkBgB,OAAX,SAAW,CAAC,CAAD,CAAA;AAChB,UAAA;MAAQ,gBAAA,GAAmB,IAAC,CAAC,CAAC,CAAC,QAAH;MACpB,IAAG,CAAI,gBAAP;QACI,gBAAA,GAAmB,IAAC,CAAC,CAAC,CAAC,QAAH,CAAD,GAAgB,KAAK,CAAC,IAAN,CAAA,EADvC;;MAEA,gBAAgB,CAAC,CAAC,CAAC,IAAH,CAAhB,GAA2B;aAC3B;IALQ,CAhkBhB;;;;;;;;;;;;;;;IAqlBI,GAAK,CAAA,CAAA;AACT,UAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,EAAA,GAAA,EAAA,OAAA;;;MAEQ,IAAG,IAAC,CAAA,SAAJ;QACI,MAAM,IAAI,KAAJ,CAAU,kGAAV,EADV;OAFR;;MAMQ,OAAA,GAAU,MAAM,CAAC,MAAP,CAAc,IAAd,EANlB;;MASQ,IAAG,SAAS,CAAC,MAAV,GAAmB,CAAtB;AACI;QAAA,KAAA,6CAAA;;UAAA,OAAO,CAAC,IAAD,CAAP,GAAgB,SAAS,CAAC,CAAD;QAAzB,CADJ;OATR;;MAaQ,OAAO,CAAC,SAAR,GAAoB,KAb5B;MAcQ,OAAO,CAAC,OAAR,GAAkB,IAAI,CAAC,GAAL,CAAA,EAd1B;MAeQ,OAAO,CAAC,IAAR,GAAe,KAfvB;MAgBQ,OAAO,CAAC,UAAR,GAAqB,KAAK,CAAC,IAAN,CAAA,EAhB7B;MAiBQ,OAAO,CAAC,GAAR,GAAc,EAjBtB;MAkBQ,OAAO,CAAC,SAAR,GAAoB,KAAK,CAAC,IAAN,CAAA;MACpB,OAAO,CAAC,IAAR,GAAe;MACf,OAAO,CAAC,OAAR,GAAkB,KAAK,CAAC,IAAN,CAAA,EApB1B;MAqBQ,OAAO,CAAC,UAAR,CAAmB,IAAC,CAAA,OAAO,CAAC,OAA5B,EArBR;aAuBQ;IAxBC;;EAtlBT;;;;;;;EAMI,IAAC,CAAA,OAAD,GACI;IAAA,IAAA,EAAM,MAAN;IACA,KAAA,EAAO,OADP;IAEA,QAAA,EAAU;EAFV;;;;;EAOJ,IAAC,CAAA,SAAD,GAAa,KAAK,CAAC,IAAN,CAAW,CAAE,QAAF,CAAX;;EACb,IAAC,CAAA,MAAD,GAAU,KAAK,CAAC,IAAN,CAAW,CAAE,KAAF,CAAX;;;;;EAKV,IAAC,CAAA,KAAD,GAAS;;EACT,IAAC,CAAA,QAAD,GAAY;;EACZ,IAAC,CAAA,KAAD,GAAS;;;;;;iBA0NT,IAAA,GAAM,OAAO,CAAC;;;;;EAkFd,gBAAA,GAAmB,QAAA,CAAC,GAAD,EAAM,cAAc,EAApB,CAAA;AACvB,QAAA,GAAA,EAAA,IAAA,EAAA,GAAA,EAAA,CAAA,EAAA,CAAA,EAAA;IAAQ,IAAA,GAAO;IACP,GAAA,GAAM,GADd;;IAEQ,KAAA,qDAAA;;MACI,IAAG,KAAK,CAAC,UAAN,CAAiB,GAAjB,CAAH;QACI,GAAA,GAAM,GAAG,CAAC,WAAJ,CAAgB,GAAhB;QACN,GAAG,CAAC,IAAJ,CAAS,MAAM,CAAC,QAAP,CAAgB,CAAhB,CAAT,EAFJ;;MAGA,IAAI,CAAC,IAAL,CAAU,GAAV;IAJJ;IAKA,IAAG,GAAG,CAAC,MAAJ,KAAc,CAAjB;MACI,GAAA,GAAM,KADV;;WAEA,CAAC,IAAD,EAAO,GAAP;EAVe;;EAYnB,gBAAA,GAAmB,QAAA,CAAC,GAAD,EAAM,OAAO,EAAb,EAAiB,GAAjB,CAAA;AACvB,QAAA,UAAA,EAAA,EAAA,EAAA,CAAA,EAAA;IAAQ,IAAG,GAAA,KAAO,MAAP,IAAoB,GAAG,CAAC,MAAJ,KAAc,CAArC;AACI,aAAO,KADX;KAAR;;IAEQ,KAAA,qCAAA;;MACI,UAAA,GAAa,IAAI,CAAC,EAAD;MACjB,IAAI,CAAC,EAAD,CAAJ,GAAW,GAAG,CAAC,cAAJ,CAAmB,UAAnB;IAFf;WAGA;EANe;;EAwBnB,eAAA,GAAkB,QAAA,CAAC,GAAD,EAAM,EAAN,EAAU,MAAV,CAAA;AACtB,QAAA,IAAA,EAAA;IAAQ,CAAC,IAAD,EAAO,GAAP,CAAA,GAAc,gBAAA,CAAiB,GAAjB,EAAsB,MAAtB;WACd,GAAG,CAAC,OAAJ,CAAY,IAAI,GAAG,CAAC,QAAQ,CAAC,QAAjB,CAA0B,EAA1B,EAA8B,IAA9B,EAAoC,GAApC,CAAZ,EAFc;EAAA;;;;;;AA0QtB,MAAM,CAAC,OAAP,GAAiB",
  "sourcesContent": [
    "###\nReqs class\n@class\n###\nclass Reqs\n    # ####################### #\n    # --- Default options --- #\n    # ####################### #\n\n    # Is methods async (returns promise) or not (returns options.send result)\n    @default =\n        mode: 'sync'\n        coder: 'Coder'\n        protocol: 'Protocol'\n\n    # ############### #\n    # --- Modules --- #\n    # ############### #\n    @protocols = Tools.null { Protocol }\n    @coders = Tools.null { Coder }\n\n    # ############################## #\n    # --- Tools and constructors --- #\n    # ############################## #\n    @Tools = Tools\n    @Protocol = Protocol\n    @Coder = Coder\n\n    # ################### #\n    # --- Constructor --- #\n    # ################### #\n\n    ###\n    Create Reqs API instance\n    @constructor\n    @param {object} options\n    ###\n    constructor: (options = {}) ->\n        @events = Tools.null()\n        @methods = Tools.null()\n        @isSession = false\n        @_callbacks = Tools.null()  # Callbacks container\n        @_id = 0                    # Callbacks counter\n        @_promises = Tools.null()   # Promises xt container\n        @_pid = 0                   # Promises counter\n\n        # Adding events handlers\n        if options.events\n            # Copy events handlers to object with nulled\n            # __proto__ property for faster and safe search\n            for own name, f of options.events\n                @events[name] = f\n\n        # Adding methods\n        if options.methods\n            @addMethods options.methods\n\n        # Saving some options for inheritance\n        # when session will be created\n        @options =\n            methods: options.methods or {}\n            session: options.session\n\n        # Setting send function\n        if options.send\n            @send = options.send\n\n        # Processing error options\n        if options.error\n            @error = options.error\n\n        # ID Generators\n        if options.newid\n            @newid = options.newid\n        if options.newpid\n            @newpid = options.newpid\n\n        # Set coder\n        coderArgs = if options.key then [options.key] else []\n        if options.coder\n            if Tools.isString options.coder\n                coder = Reqs.coders[options.coder]\n            else\n                coder = Reqs.coders[options.coder.name or Reqs.default.coder]\n                if options.coder.arguments\n                    coderArgs = options.coder.arguments\n            if not coder\n                throw new Error \"Unknown coder: '#{options.coder}'\"\n        else\n            coder = Reqs.coders[Reqs.default.coder]\n        @coder = new coder ...coderArgs\n\n        # Set protocol\n        protocolArgs = []\n        if options.protocol\n            if Tools.isString options.protocol\n                protocol = Reqs.protocols[options.protocol]\n            else\n                protocol = Reqs.protocols[options.protocol.name or Reqs.default.protocol]\n                if options.protocol.arguments\n                    protocolArgs = options.protocol.arguments\n            if not protocol\n                throw new Error \"Unknown protocol: '#{options.protocol}'\"\n        else\n            protocol = Reqs.protocols[Reqs.default.protocol]\n        @protocol = new protocol ...protocolArgs\n\n        # Processing session options\n        if options.session\n            # Save custom arguments names\n            sArgs = options.session.arguments\n            if Tools.isString sArgs\n                @options.session.arguments = [sArgs]\n            else if Tools.isArray sArgs\n                @options.session.arguments = sArgs\n        else\n            @options.session =\n                arguments: []\n\n        Object.defineProperty @, 'async', {\n            get: => @_async\n            set: (value) => @asyncSet value\n        }\n\n        @async =\n            if Tools.isBoolean options.mode\n            then options.mode is 'async'\n            else Reqs.default.mode is 'async'\n\n\n    # #################### #\n    # --- Main methods --- #\n    # #################### #\n\n    ###\n    Parse the request data.\n    @param {string} request — the string/buffer/whatever from client/server\n    (allow to transfer any user data from data input point to API functions)\n    @return {object} result — result of API call (can be undefined or null)\n    ###\n    parse: (data) ->\n        try\n            decodedData = @coder.decode data\n        catch e\n            return @err400 \"Data processing error: #{e.message}\\n#{e.stack}\"\n\n        try\n            if Tools.isArray decodedData\n                result = @processRequest request for request in decodedData\n            else\n                result = @processRequest decodedData\n        catch e\n            return @err400 \"Request parsing error: #{e.message}\\n#{e.stack}\"\n        result\n\n    processRequest: (data) ->\n        request = @protocol.parse data\n        protocol = @protocol\n        types = protocol.types\n        id = request.id\n        switch request.type\n\n            # ##################################################\n            # API Method handling\n            when types.method\n                method = request.method\n                xt = @events[method]\n                if xt\n                    args = argsConvertId2Cb @, request.args, request.cbs\n                    if id       # This request was created with promise (async mode)\n                        try         # Normal processing\n                            result = xt.apply @, args\n\n                            if result instanceof Promise\n                                result.then( (promiseResult) =>\n                                    @request new protocol.Resolve id, promiseResult\n                                ).catch( (promiseErr) =>\n                                    @request new protocol.Reject id, promiseErr.toString()\n                                )\n                                return result\n                            else\n                                response = new protocol.Resolve id, result\n\n                        catch e     # Errors processing\n                            response = new protocol.Reject id, e.toString()\n                        return @request response\n                    else        # Client/server don't want result (or, callbacks is used) (sync mode)\n                        return xt.apply @, args\n                else\n                    return @err404 \"Method not found: <#{method}>.\"\n\n            # ##################################################\n            # Callback handling\n            when types.callback\n                xt = @_callbacks[id]\n                if xt is undefined\n                    return @err404 \"Wrong callback ID: <#{id}>.\"\n                delete @_callbacks[id]\n                args = argsConvertId2Cb @, request.args, request.cbs\n                return xt.apply @, args or []\n\n            when types.resolve\n                promiseXt = @_promises[id]\n                delete @_promises[id]\n                if promiseXt and promiseXt.resolve\n                    return promiseXt.resolve.call @, request.resolve\n                else\n                    return @err404 \"Wrong resolve promise ID: <#{id}>.\"\n\n            when types.reject\n                promiseXt = @_promises[id]\n                delete @_promises[id]\n                if promiseXt and promiseXt.reject\n                    return promiseXt.reject.call @, request.reject\n                else\n                    return @err404 \"Wrong reject promise ID: <#{id}>.\"\n\n            when types.info\n                if id\n                    # TODO: add full details sending\n                    return @request new protocol.Callback id, [\n                        Object.keys @methods    # -> events for connected client\n                        Object.keys @events     # -> methods for connected client\n                    ]\n\n            when types.error\n                return @err422 \"Error request. Code: '#{request.code}'. #{request.message}\"\n\n            else\n                return @err422 \"Unknown request type: '#{request.type}'.\"\n\n        return null\n\n    ###\n    Encode and send request\n    @param {object} request — request object\n    ###\n    request: (request) ->\n        @send @coder.encode request\n\n    ###\n    Send compiled request to server/client.\n    @param {string} data — data for sending (default: JSON string)\n    ###\n    send: console.info\n\n\n    # ############################## #\n    # --- Error handling methods --- #\n    # ############################## #\n\n\n    ###\n    Error 'Input data decoding error or wrong input data'\n    @param {string} message — error message\n    ###\n    err400: (message) ->\n        @error message, 400\n\n\n    ###\n    Error 'API Method or callback not found'\n    @param {string} message — error message\n    ###\n    err404: (message) ->\n        @error message, 404\n\n\n    ###\n    Error 'Wrong data input'\n    @param {string} message — error message\n    ###\n    err422: (message) ->\n        @error message, 422\n\n\n    ###\n    Error rised during processing request\n    @param {number} code — error code\n    @param {string} message — error message\n    ###\n    error: (message, code) ->\n        console.warn code, message\n\n    ###\n    Send error message to client/server\n    @param {string} id — request id\n    @param {number} code — error code\n    @param {string} message — error message\n    ###\n    sendError: (message, code, id) ->\n        @request new @protocol.Error message, code, id\n\n\n    # ########################## #\n    # --- Options in runtime --- #\n    # ########################## #\n    ###\n    Set method's executing mode: async or sync\n    @param {boolean} value — async or sync mode\n    ###\n    asyncSet: (value) ->\n        @_async = value\n        @methodApply = if value then @methodAsyncApply else @methodSyncApply\n        return\n    ###\n    Set coder by name\n    @param {string} coder — coder name\n    ###\n    coderSet: (coder) -> @coder = Reqs.coders[coder]\n\n    ###\n    Set protocol by name\n    @param {string} protocol — protocol name\n    ###\n    protocolSet: (protocol) -> @protocol = Reqs.protocols[protocol]\n\n    ###\n    Use module\n    @param {Class} module — module to use\n    ###\n    use: (module, ...args) -> @[module.option] = new module ...args\n\n    # ###################################### #\n    # --- Callbacks arguments converters --- #\n    # ###################################### #\n    argsConvertCb2Id = (api, requestArgs = []) ->\n        args = []\n        cbs = []\n        for arg, i in requestArgs           # Converting object to array\n            if Tools.isFunction arg\n                arg = api.addCallback arg\n                cbs.push Number.parseInt i  # For array-like objects 'arguments' case\n            args.push arg\n        if cbs.length is 0\n            cbs = null\n        [args, cbs]\n\n    argsConvertId2Cb = (api, args = [], cbs) ->\n        if cbs is undefined or cbs.length is 0\n            return args\n        for id in cbs       # Converting object to array\n            callbackId = args[id]\n            args[id] = api.createCallback callbackId\n        args\n\n\n    # ################################## #\n    # --- Callbacks handling methods --- #\n    # ################################## #\n    ###\n    Create callback function with cached ID and session and return it.\n    @param {string} id — ID of callback\n    @return {function} xt — function with cached id and current Reqs API session\n    ###\n    createCallback: (id) ->\n        api = @\n        newCb = ->\n            callbackRequest api, id, arguments\n        newCb.created = Date.now()                              # Callback creation time - required for callbacks dispose in runtime\n        newCb\n\n    callbackRequest = (api, id, cbArgs) ->\n        [args, cbs] = argsConvertCb2Id api, cbArgs\n        api.request new api.protocol.Callback id, args, cbs     # Request sending\n\n    ###\n    Generate new ID for callback or promise.\n    @return {string} id — callback ID as string\n    ###\n    newid: ->\n        if @_id is Number.MAX_SAFE_INTEGER\n            @_id = 0\n        (++@_id).toString()\n\n    ###\n    Generate new promise ID for async request.\n    @return {string} id — promise ID as string\n    ###\n    newpid: ->\n        if @_pid is Number.MAX_SAFE_INTEGER\n            @_pid = 0\n        (++@_pid).toString()\n\n    ###\n    Add callback and return it's ID. By default ID is a simple counter.\n    Callbacks starts from 1 and up to Number.MAX_SAFE_INTEGER.\n    Transfers as a string for case if server/client can have\n    Number.MAX_SAFE_INTEGER less, then client/server and custom ID generators.\n    @param {function} cb — callback function\n    @return {string} id — callback's ID\n    ###\n    addCallback: (cb) ->\n        id = @newid()\n        @_callbacks[id] = cb\n        id\n\n    ###\n    Call method with next arguments.\n    Mode (async/sync) depends on this.async flag.\n    @param {string} method — method name\n    @param {object} ...args — arguments\n    ###\n    method: (method, ...args) -> @methodApply method, args\n\n    ###\n    Call method asynchronously with next arguments\n    @param {string} method — method name\n    @param {object} ...args — arguments\n    ###\n    methodAsync: (method, ...args) -> @methodAsyncApply method, args\n\n    ###\n    Call method synchronously with next arguments\n    @param {string} method — method name\n    @param {object} ...args — arguments\n    ###\n    methodSync: (method, ...args) -> @methodSyncApply method, args\n\n    ###\n    Apply method asynchronously with arguments\n    @param {string} method — method name\n    @param {arrayLike} args — arguments array-like object (arguments)\n    @param {array} args — arguments array\n    ###\n    methodAsyncApply: (method, args) ->\n        [convertedArgs, cbs] = argsConvertCb2Id @, args\n        pid = @newpid()\n        promise = new Promise (resolve, reject) => @_promises[pid] = { resolve, reject }\n        @request new @protocol.Method method, pid, convertedArgs, cbs   # Request sending\n        promise\n\n    ###\n    Apply method synchronously with arguments\n    @param {string} method — method name\n    @param {arrayLike} args — arguments array-like object (arguments)\n    @param {array} args — arguments array\n    ###\n    methodSyncApply: (method, args) ->\n        [convertedArgs, cbs] = argsConvertCb2Id @, args\n        @request new @protocol.Method method, null, convertedArgs, cbs   # Request sending\n\n    ###\n    Create function-wrapper for API calls.\n    Usefull for data preprocessing before send.\n    Arguments of xt will be sended to client/server directly.\n    Session and method's name is cahced.\n    @param {string} method — method's name, will be cached\n    @return {object} this\n    ###\n    addMethod: (method) ->\n        api = @\n        @methods[method] = -> api.methodApply method, arguments\n        @\n\n    ###\n    Create function-wrapper for API calls for selected function.\n    Allow to prepare arguments or callback for server.\n    Session and name is cahced.\n    @param {string} functionName — function name, will be cached\n    @param {function} xt — function, will be called before request sending\n    @param {function} xtThen — function, attached to promise via 'then' method\n    @param {function} xtCatch — function, attached to promise via 'catch' method\n    @return {object} this\n    ###\n    createMethod: (method, xt, mode, xtThen, xtCatch, safe = true) ->\n        api = @\n        methods = @methods\n        if safe and methods[method] then return\n        if mode is undefined\n            if xt\n                methods[method] = -> api.methodApply method, xt.apply api, arguments\n            else\n                methods[method] = -> api.methodApply method, arguments\n        else if mode is 'async'\n            if xtThen and xtCatch\n                mxt =\n                    if xt then ->\n                        api.methodAsyncApply(\n                            method, xt.apply api, arguments\n                        ).then( xtThen ).catch xtCatch\n                    else ->\n                        api.methodAsyncApply(\n                            method, arguments\n                        ).then( xtThen ).catch xtCatch\n            else if xtThen\n                mxt =\n                    if xt then ->\n                        api.methodAsyncApply(\n                            method, xt.apply api, arguments\n                        ).then xtThen\n                    else ->\n                        api.methodAsyncApply(\n                            method, arguments\n                        ).then xtThen\n            else if xtCatch\n                mxt =\n                    if xt then ->\n                        api.methodAsyncApply(\n                            method, xt.apply api, arguments\n                        ).catch xtCatch\n                    else ->\n                        api.methodAsyncApply(\n                            method, arguments\n                        ).catch xtCatch\n            else\n                mxt =\n                    if xt then -> api.methodAsyncApply method, xt.apply api, arguments\n                    else -> api.methodAsyncApply method, arguments\n            methods[method] = mxt\n        else\n            methods[method] =\n                if xt then -> api.methodSyncApply method, xt.apply api, arguments\n                else -> api.methodSyncApply method, arguments\n        @\n\n    ###\n    Create API methods. Basically just wrap function into another function\n    with cached context (API instance or session) and method name.\n    @param {array} methodsList — string array with function names\n    @param {object} methodsList — object with functions for data preprocessing\n    @param {safe} safe — do not overwrite existsing methods (true by default)\n    @return {object} this\n    ###\n    addMethods: (methodsList, safe) ->\n        methods = @methods\n        if Tools.isArray methodsList\n\n            for method in methodsList\n                if Tools.isString method\n                    if methods[method]\n                        continue\n                    @addMethod method\n                else if Tools.isObject method\n                    for own name, m of method\n                        if methods[name] then continue\n                        if Tools.isFunction m\n                            @createMethod name, m, null, null, null, safe\n                        else\n                            @createMethod name, m.method, m.mode, m.then, m.catch, safe\n\n        else if Tools.isObject methodsList\n            for own name, m of methodsList\n                if methods[name] then continue\n                if Tools.isFunction m\n                    @createMethod name, m, null, null, null, safe\n                else\n                    @createMethod name, m.method, m.mode, m.then, m.catch, safe\n        @\n\n\n    ###\n    Get info about server's API\n    @param {string} [methodName] — methodName\n    @param {function} cb — callback for result processing\n    @return {object}\n    ###\n    info: (cb, options = {}) ->\n        if not Tools.isFunction cb\n            throw new Error 'Reqs.info() call without callback for data.'\n        # @request INFO: methodName, CB: @addCallback cb\n        id = @addCallback cb\n        @request new @protocol.Info id, options.events, options.methods\n\n\n    ###\n    Collect server's API methods list and create local client API methods\n    @param {function} cb — callback\n    @return {object} this\n    ###\n    build: (cb) ->\n        @info (events, methods) =>\n            @addMethods methods\n            if Tools.isFunction cb\n                cb events, methods\n        @\n\n\n    # ########################## #\n    # --- Modules management --- #\n    # ########################## #\n    @addModule: (m) ->\n        modulesContainer = @[m.category]\n        if not modulesContainer\n            modulesContainer = @[m.category] = Tools.null()\n        modulesContainer[m.name] = m\n        m\n\n    # ########################### #\n    # --- Sessions management --- #\n    # ########################### #\n\n    ###\n    Create new session (child for current Reqs API)\n    @param {object} [context][arg_1...arg_n] — user-defined argument\n    or arguments for adding to session object as properties.\n    If options.session.arguments is empty, then first argument will be\n    saved to <Session>.context property.\n    If options.session.arguments array is defined, then will be used\n    this list of arguments names for defining the properties of session.\n    @return {Session} session — session instance nested from Reqs API instance.\n    ###\n    new: ->\n        # Check for correct session creation: session must be\n        # inherited from Reqs API instance, not from session.\n        if @isSession\n            throw new Error '<Reqs.Session instance>.new() used for new session creation. Use insted \"<Reqs instance>.new()\".'\n\n        # Creating of session instance nested from current Reqs API\n        session = Object.create @\n\n        # Adding user-defined properties\n        if arguments.length > 0\n            session[prop] = arguments[i] for prop, i in @options.session.arguments\n\n        # Setting session properties\n        session.isSession = true                        # Is this object is session\n        session.created = Date.now()                    # Session creation date\n        session.reqs = @                                # Parent Reqs API instance\n        session._callbacks = Tools.null()               # This session callbacks list\n        session._id = 0                                 # Callbacks ID counter\n        session._promises = Tools.null()\n        session._pid = 0\n        session.methods = Tools.null()                  # Session client API functions\n        session.addMethods @options.methods             # Methods creation (required for caching session)\n\n        session\n\nmodule.exports = Reqs\n"
  ]
}